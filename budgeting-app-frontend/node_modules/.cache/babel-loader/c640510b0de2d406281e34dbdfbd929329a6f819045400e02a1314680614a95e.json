{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\pmwen\\\\OneDrive\\\\Desktop\\\\budgeting-app\\\\budgeting-app-frontend\\\\src\\\\components\\\\dashboard\\\\Dashboard.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport axios from 'axios';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPlus, faFilePdf } from '@fortawesome/free-solid-svg-icons';\nimport Sidebar from './Sidebar';\nimport SummaryCards from './SummaryCards';\nimport ChartsSection from './ChartsSection';\nimport TransactionsTable from './TransactionsTable';\nimport TransactionForm from './TransactionForm';\nimport BudgetSummary from './BudgetSummary';\nimport ProfileSection from './ProfileSection';\nimport NotificationsList from './NotificationsList';\nimport Chatbot from '../common/Chatbot';\nimport { formatMoney, getCategoryIcon, formatMonthlyData } from '../common/helpers';\nimport './Dashboard.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Dashboard = () => {\n  _s();\n  const [activeMenu, setActiveMenu] = useState('dashboard');\n  const [dashboardData, setDashboardData] = useState(null);\n  const [user, setUser] = useState(null);\n  const [notifications, setNotifications] = useState([]);\n  const [expenseCategories, setExpenseCategories] = useState([]);\n  const [expenseTransactions, setExpenseTransactions] = useState([]);\n  const [budgets, setBudgets] = useState([]);\n  const [monthlyTrends, setMonthlyTrends] = useState(null);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [selectedCategory, setSelectedCategory] = useState('all');\n  const [showTransactionForm, setShowTransactionForm] = useState(false);\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [formError, setFormError] = useState('');\n  const navigate = useNavigate();\n  useEffect(() => {\n    const fetchDashboardData = async () => {\n      const token = localStorage.getItem('access_token');\n      if (!token) {\n        navigate('/login');\n        return;\n      }\n      try {\n        const [dashboardRes, userRes, notificationsRes, budgetsRes, monthlyRes] = await Promise.all([axios.get('http://localhost:8000/api/dashboard/', {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        }), axios.get('http://localhost:8000/api/user/', {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        }), axios.get('http://localhost:8000/api/notifications/', {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        }).catch(() => ({\n          data: []\n        })), axios.get('http://localhost:8000/api/budgets/', {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        }).catch(() => ({\n          data: []\n        })), axios.get('http://localhost:8000/api/transactions/monthly/', {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        }).catch(() => ({\n          data: []\n        }))]);\n        const processedData = {\n          ...dashboardRes.data,\n          savings_goal: {\n            ...dashboardRes.data.savings_goal,\n            current_amount: Number(dashboardRes.data.savings_goal.current_amount),\n            target_amount: Number(dashboardRes.data.savings_goal.target_amount)\n          }\n        };\n        setDashboardData(processedData);\n        setUser(userRes.data);\n        setNotifications(notificationsRes.data);\n        setBudgets(budgetsRes.data);\n        setMonthlyTrends(formatMonthlyData(monthlyRes.data));\n        if (dashboardRes.data.recent_transactions) {\n          const expenses = dashboardRes.data.recent_transactions.filter(t => t.type === 'expense');\n          setExpenseTransactions(expenses);\n          const categoryTotals = {};\n          expenses.forEach(expense => {\n            if (!categoryTotals[expense.category]) {\n              categoryTotals[expense.category] = 0;\n            }\n            categoryTotals[expense.category] += Number(expense.amount);\n          });\n          setExpenseCategories(Object.entries(categoryTotals).map(([name, amount]) => ({\n            name,\n            amount,\n            icon: getCategoryIcon(name)\n          })));\n        }\n      } catch (error) {\n        console.error('Error fetching data:', error);\n        localStorage.removeItem('access_token');\n        navigate('/login');\n      }\n    };\n    fetchDashboardData();\n  }, [navigate]);\n  const handleLogout = () => {\n    localStorage.removeItem('access_token');\n    navigate('/login');\n  };\n  const markNotificationAsRead = async id => {\n    const token = localStorage.getItem('access_token');\n    try {\n      await axios.patch(`http://localhost:8000/api/notifications/${id}/`, {\n        is_read: true\n      }, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      setNotifications(notifications.map(n => n.id === id ? {\n        ...n,\n        is_read: true\n      } : n));\n    } catch (error) {\n      console.error('Error marking notification as read:', error);\n    }\n  };\n  const generateReport = async (type = 'monthly') => {\n    try {\n      const response = await axios.get(`http://localhost:8000/api/reports/?type=${type}`, {\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem('access_token')}`\n        },\n        responseType: 'blob'\n      });\n      const url = window.URL.createObjectURL(new Blob([response.data]));\n      const link = document.createElement('a');\n      link.href = url;\n      link.setAttribute('download', `budget_report_${new Date().toISOString().split('T')[0]}.pdf`);\n      document.body.appendChild(link);\n      link.click();\n      link.remove();\n    } catch (error) {\n      console.error('Error generating report:', error);\n      alert('Failed to generate report');\n    }\n  };\n  const handleAddTransaction = async transaction => {\n    const token = localStorage.getItem('access_token');\n    setIsSubmitting(true);\n    setFormError('');\n    try {\n      // Auto-categorize if description exists but no category\n      if (transaction.description && !transaction.category) {\n        try {\n          const catResponse = await axios.post('http://localhost:8000/api/categorize/', {\n            description: transaction.description\n          }, {\n            headers: {\n              Authorization: `Bearer ${token}`\n            }\n          });\n          transaction.category = catResponse.data.category;\n        } catch (catError) {\n          console.log('Auto-categorization failed, using default');\n          transaction.category = 'other';\n        }\n      }\n      const response = await axios.post('http://localhost:8000/api/transactions/', {\n        ...transaction,\n        user: user.id,\n        amount: parseFloat(transaction.amount)\n      }, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n\n      // Optimistic UI update\n      setDashboardData(prev => ({\n        ...prev,\n        recent_transactions: [response.data, ...prev.recent_transactions.slice(0, 4)],\n        income: transaction.type === 'income' ? prev.income + parseFloat(transaction.amount) : prev.income,\n        expenses: transaction.type === 'expense' ? prev.expenses + parseFloat(transaction.amount) : prev.expenses\n      }));\n\n      // Update expense transactions\n      if (transaction.type === 'expense') {\n        setExpenseTransactions(prev => [response.data, ...prev]);\n\n        // Update expense categories\n        setExpenseCategories(prev => {\n          const newCategories = [...prev];\n          const categoryIndex = newCategories.findIndex(c => c.name === transaction.category);\n          if (categoryIndex >= 0) {\n            newCategories[categoryIndex].amount += parseFloat(transaction.amount);\n          } else {\n            newCategories.push({\n              name: transaction.category,\n              amount: parseFloat(transaction.amount),\n              icon: getCategoryIcon(transaction.category)\n            });\n          }\n          return newCategories;\n        });\n      }\n      setShowTransactionForm(false);\n    } catch (error) {\n      var _error$response, _error$response$data;\n      console.error('Transaction error:', error);\n      setFormError(((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.detail) || 'Failed to add transaction. Please try again.');\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n  const handleEditTransaction = async transaction => {\n    const token = localStorage.getItem('access_token');\n    try {\n      await axios.put(`http://localhost:8000/api/transactions/${transaction.id}/`, transaction, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      await refreshData();\n    } catch (error) {\n      console.error('Error updating transaction:', error);\n      alert('Failed to update transaction. Please try again.');\n    }\n  };\n  const handleDeleteTransaction = async transactionId => {\n    const token = localStorage.getItem('access_token');\n    try {\n      await axios.delete(`http://localhost:8000/api/transactions/${transactionId}/`, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      await refreshData();\n    } catch (error) {\n      var _error$response2, _error$response2$data;\n      console.error('Error deleting transaction:', error);\n      alert(`Failed to delete transaction. ${((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.detail) || 'Please try again.'}`);\n    }\n  };\n  const refreshData = async () => {\n    const token = localStorage.getItem('access_token');\n    try {\n      const [dashboardRes, monthlyRes, budgetsRes] = await Promise.all([axios.get('http://localhost:8000/api/dashboard/', {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      }), axios.get('http://localhost:8000/api/transactions/monthly/', {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      }), axios.get('http://localhost:8000/api/budgets/', {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      })]);\n      setDashboardData(dashboardRes.data);\n      setMonthlyTrends(formatMonthlyData(monthlyRes.data));\n      setBudgets(budgetsRes.data);\n    } catch (error) {\n      console.error('Error refreshing data:', error);\n    }\n  };\n  if (!dashboardData || !user) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading\",\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 271,\n      columnNumber: 12\n    }, this);\n  }\n  const {\n    income,\n    expenses,\n    savings_goal,\n    recent_transactions\n  } = dashboardData;\n  const savings = income - expenses;\n  const progressPercentage = savings_goal.target_amount > 0 ? savings_goal.current_amount / savings_goal.target_amount * 100 : 0;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dashboard-container\",\n    children: [/*#__PURE__*/_jsxDEV(Sidebar, {\n      activeMenu: activeMenu,\n      setActiveMenu: setActiveMenu,\n      notifications: notifications,\n      handleLogout: handleLogout\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 282,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"content-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: activeMenu.charAt(0).toUpperCase() + activeMenu.slice(1)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 291,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"header-actions\",\n          children: [activeMenu === 'expenses' && /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn btn-primary\",\n            onClick: () => setShowTransactionForm(true),\n            disabled: isSubmitting,\n            children: [/*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n              icon: faPlus\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 299,\n              columnNumber: 17\n            }, this), isSubmitting ? 'Processing...' : 'Add Transaction']\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 294,\n            columnNumber: 15\n          }, this), activeMenu === 'overview' && /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn btn-secondary\",\n            onClick: () => generateReport(),\n            children: [/*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n              icon: faFilePdf\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 308,\n              columnNumber: 17\n            }, this), \" Generate Report\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 304,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 292,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 290,\n        columnNumber: 9\n      }, this), activeMenu === 'dashboard' && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(SummaryCards, {\n          income: income,\n          expenses: expenses,\n          savings: savings,\n          savings_goal: savings_goal,\n          progressPercentage: progressPercentage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 316,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(ChartsSection, {\n          income: income,\n          expenses: expenses,\n          monthlyTrends: monthlyTrends,\n          expenseCategories: expenseCategories,\n          budgets: budgets\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 323,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(TransactionsTable, {\n          transactions: recent_transactions,\n          title: \"Recent Transactions\",\n          onDelete: handleDeleteTransaction,\n          onEdit: handleEditTransaction\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 330,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true), activeMenu === 'expenses' && /*#__PURE__*/_jsxDEV(TransactionsTable, {\n        transactions: expenseTransactions,\n        title: \"Expenses\",\n        showFilters: true,\n        searchTerm: searchTerm,\n        setSearchTerm: setSearchTerm,\n        selectedCategory: selectedCategory,\n        setSelectedCategory: setSelectedCategory,\n        expenseCategories: expenseCategories,\n        onDelete: handleDeleteTransaction,\n        onEdit: handleEditTransaction\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 340,\n        columnNumber: 11\n      }, this), activeMenu === 'overview' && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(ChartsSection, {\n          income: income,\n          expenses: expenses,\n          monthlyTrends: monthlyTrends,\n          expenseCategories: expenseCategories,\n          budgets: budgets,\n          showBudgetChart: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 356,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(BudgetSummary, {\n          budgets: budgets,\n          expenseCategories: expenseCategories\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 364,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true), activeMenu === 'profile' && /*#__PURE__*/_jsxDEV(ProfileSection, {\n        user: user,\n        setUser: setUser\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 372,\n        columnNumber: 11\n      }, this), activeMenu === 'notifications' && /*#__PURE__*/_jsxDEV(NotificationsList, {\n        notifications: notifications,\n        markNotificationAsRead: markNotificationAsRead\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 379,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 289,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Chatbot, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 386,\n      columnNumber: 7\n    }, this), showTransactionForm && /*#__PURE__*/_jsxDEV(TransactionForm, {\n      onClose: () => !isSubmitting && setShowTransactionForm(false),\n      onSubmit: handleAddTransaction,\n      isSubmitting: isSubmitting,\n      error: formError,\n      categories: ['food', 'transportation', 'housing', 'entertainment', 'utilities', 'health', 'education', 'other']\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 389,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 281,\n    columnNumber: 5\n  }, this);\n};\n_s(Dashboard, \"mQ7xl+HWxSw9ngbNCFxZ+mxpFmQ=\", false, function () {\n  return [useNavigate];\n});\n_c = Dashboard;\nexport default Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","axios","FontAwesomeIcon","faPlus","faFilePdf","Sidebar","SummaryCards","ChartsSection","TransactionsTable","TransactionForm","BudgetSummary","ProfileSection","NotificationsList","Chatbot","formatMoney","getCategoryIcon","formatMonthlyData","jsxDEV","_jsxDEV","Fragment","_Fragment","Dashboard","_s","activeMenu","setActiveMenu","dashboardData","setDashboardData","user","setUser","notifications","setNotifications","expenseCategories","setExpenseCategories","expenseTransactions","setExpenseTransactions","budgets","setBudgets","monthlyTrends","setMonthlyTrends","searchTerm","setSearchTerm","selectedCategory","setSelectedCategory","showTransactionForm","setShowTransactionForm","isSubmitting","setIsSubmitting","formError","setFormError","navigate","fetchDashboardData","token","localStorage","getItem","dashboardRes","userRes","notificationsRes","budgetsRes","monthlyRes","Promise","all","get","headers","Authorization","catch","data","processedData","savings_goal","current_amount","Number","target_amount","recent_transactions","expenses","filter","t","type","categoryTotals","forEach","expense","category","amount","Object","entries","map","name","icon","error","console","removeItem","handleLogout","markNotificationAsRead","id","patch","is_read","n","generateReport","response","responseType","url","window","URL","createObjectURL","Blob","link","document","createElement","href","setAttribute","Date","toISOString","split","body","appendChild","click","remove","alert","handleAddTransaction","transaction","description","catResponse","post","catError","log","parseFloat","prev","slice","income","newCategories","categoryIndex","findIndex","c","push","_error$response","_error$response$data","detail","handleEditTransaction","put","refreshData","handleDeleteTransaction","transactionId","delete","_error$response2","_error$response2$data","className","children","fileName","_jsxFileName","lineNumber","columnNumber","savings","progressPercentage","charAt","toUpperCase","onClick","disabled","transactions","title","onDelete","onEdit","showFilters","showBudgetChart","onClose","onSubmit","categories","_c","$RefreshReg$"],"sources":["C:/Users/pmwen/OneDrive/Desktop/budgeting-app/budgeting-app-frontend/src/components/dashboard/Dashboard.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faPlus, faFilePdf } from '@fortawesome/free-solid-svg-icons';\r\nimport Sidebar from './Sidebar';\r\nimport SummaryCards from './SummaryCards';\r\nimport ChartsSection from './ChartsSection';\r\nimport TransactionsTable from './TransactionsTable';\r\nimport TransactionForm from './TransactionForm';\r\nimport BudgetSummary from './BudgetSummary';\r\nimport ProfileSection from './ProfileSection';\r\nimport NotificationsList from './NotificationsList';\r\nimport Chatbot from '../common/Chatbot';\r\nimport { formatMoney, getCategoryIcon, formatMonthlyData } from '../common/helpers';\r\nimport './Dashboard.css';\r\n\r\nconst Dashboard = () => {\r\n  const [activeMenu, setActiveMenu] = useState('dashboard');\r\n  const [dashboardData, setDashboardData] = useState(null);\r\n  const [user, setUser] = useState(null);\r\n  const [notifications, setNotifications] = useState([]);\r\n  const [expenseCategories, setExpenseCategories] = useState([]);\r\n  const [expenseTransactions, setExpenseTransactions] = useState([]);\r\n  const [budgets, setBudgets] = useState([]);\r\n  const [monthlyTrends, setMonthlyTrends] = useState(null);\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n  const [selectedCategory, setSelectedCategory] = useState('all');\r\n  const [showTransactionForm, setShowTransactionForm] = useState(false);\r\n  const [isSubmitting, setIsSubmitting] = useState(false);\r\n  const [formError, setFormError] = useState('');\r\n  const navigate = useNavigate();\r\n\r\n  useEffect(() => {\r\n    const fetchDashboardData = async () => {\r\n      const token = localStorage.getItem('access_token');\r\n      if (!token) {\r\n        navigate('/login');\r\n        return;\r\n      }\r\n\r\n      try {\r\n        const [dashboardRes, userRes, notificationsRes, budgetsRes, monthlyRes] = await Promise.all([\r\n          axios.get('http://localhost:8000/api/dashboard/', {\r\n            headers: { Authorization: `Bearer ${token}` }\r\n          }),\r\n          axios.get('http://localhost:8000/api/user/', {\r\n            headers: { Authorization: `Bearer ${token}` }\r\n          }),\r\n          axios.get('http://localhost:8000/api/notifications/', {\r\n            headers: { Authorization: `Bearer ${token}` }\r\n          }).catch(() => ({ data: [] })),\r\n          axios.get('http://localhost:8000/api/budgets/', {\r\n            headers: { Authorization: `Bearer ${token}` }\r\n          }).catch(() => ({ data: [] })),\r\n          axios.get('http://localhost:8000/api/transactions/monthly/', {\r\n            headers: { Authorization: `Bearer ${token}` }\r\n          }).catch(() => ({ data: [] }))\r\n        ]);\r\n\r\n        const processedData = {\r\n          ...dashboardRes.data,\r\n          savings_goal: {\r\n            ...dashboardRes.data.savings_goal,\r\n            current_amount: Number(dashboardRes.data.savings_goal.current_amount),\r\n            target_amount: Number(dashboardRes.data.savings_goal.target_amount)\r\n          }\r\n        };\r\n        \r\n        setDashboardData(processedData);\r\n        setUser(userRes.data);\r\n        setNotifications(notificationsRes.data);\r\n        setBudgets(budgetsRes.data);\r\n        setMonthlyTrends(formatMonthlyData(monthlyRes.data));\r\n\r\n        if (dashboardRes.data.recent_transactions) {\r\n          const expenses = dashboardRes.data.recent_transactions.filter(t => t.type === 'expense');\r\n          setExpenseTransactions(expenses);\r\n          \r\n          const categoryTotals = {};\r\n          expenses.forEach(expense => {\r\n            if (!categoryTotals[expense.category]) {\r\n              categoryTotals[expense.category] = 0;\r\n            }\r\n            categoryTotals[expense.category] += Number(expense.amount);\r\n          });\r\n          \r\n          setExpenseCategories(Object.entries(categoryTotals).map(([name, amount]) => ({\r\n            name,\r\n            amount,\r\n            icon: getCategoryIcon(name)\r\n          })));\r\n        }\r\n\r\n      } catch (error) {\r\n        console.error('Error fetching data:', error);\r\n        localStorage.removeItem('access_token');\r\n        navigate('/login');\r\n      }\r\n    };\r\n\r\n    fetchDashboardData();\r\n  }, [navigate]);\r\n\r\n  const handleLogout = () => {\r\n    localStorage.removeItem('access_token');\r\n    navigate('/login');\r\n  };\r\n\r\n  const markNotificationAsRead = async (id) => {\r\n    const token = localStorage.getItem('access_token');\r\n    try {\r\n      await axios.patch(`http://localhost:8000/api/notifications/${id}/`, \r\n        { is_read: true },\r\n        { headers: { Authorization: `Bearer ${token}` } }\r\n      );\r\n      setNotifications(notifications.map(n => \r\n        n.id === id ? { ...n, is_read: true } : n\r\n      ));\r\n    } catch (error) {\r\n      console.error('Error marking notification as read:', error);\r\n    }\r\n  };\r\n\r\n  const generateReport = async (type = 'monthly') => {\r\n    try {\r\n      const response = await axios.get(`http://localhost:8000/api/reports/?type=${type}`, {\r\n        headers: { Authorization: `Bearer ${localStorage.getItem('access_token')}` },\r\n        responseType: 'blob'\r\n      });\r\n      \r\n      const url = window.URL.createObjectURL(new Blob([response.data]));\r\n      const link = document.createElement('a');\r\n      link.href = url;\r\n      link.setAttribute('download', `budget_report_${new Date().toISOString().split('T')[0]}.pdf`);\r\n      document.body.appendChild(link);\r\n      link.click();\r\n      link.remove();\r\n    } catch (error) {\r\n      console.error('Error generating report:', error);\r\n      alert('Failed to generate report');\r\n    }\r\n  };\r\n\r\n  const handleAddTransaction = async (transaction) => {\r\n    const token = localStorage.getItem('access_token');\r\n    setIsSubmitting(true);\r\n    setFormError('');\r\n\r\n    try {\r\n      // Auto-categorize if description exists but no category\r\n      if (transaction.description && !transaction.category) {\r\n        try {\r\n          const catResponse = await axios.post(\r\n            'http://localhost:8000/api/categorize/',\r\n            { description: transaction.description },\r\n            { headers: { Authorization: `Bearer ${token}` } }\r\n          );\r\n          transaction.category = catResponse.data.category;\r\n        } catch (catError) {\r\n          console.log('Auto-categorization failed, using default');\r\n          transaction.category = 'other';\r\n        }\r\n      }\r\n\r\n      const response = await axios.post(\r\n        'http://localhost:8000/api/transactions/',\r\n        {\r\n          ...transaction,\r\n          user: user.id,\r\n          amount: parseFloat(transaction.amount)\r\n        },\r\n        { headers: { Authorization: `Bearer ${token}` } }\r\n      );\r\n\r\n      // Optimistic UI update\r\n      setDashboardData(prev => ({\r\n        ...prev,\r\n        recent_transactions: [response.data, ...prev.recent_transactions.slice(0, 4)],\r\n        income: transaction.type === 'income' ? \r\n          prev.income + parseFloat(transaction.amount) : prev.income,\r\n        expenses: transaction.type === 'expense' ? \r\n          prev.expenses + parseFloat(transaction.amount) : prev.expenses\r\n      }));\r\n\r\n      // Update expense transactions\r\n      if (transaction.type === 'expense') {\r\n        setExpenseTransactions(prev => [response.data, ...prev]);\r\n        \r\n        // Update expense categories\r\n        setExpenseCategories(prev => {\r\n          const newCategories = [...prev];\r\n          const categoryIndex = newCategories.findIndex(c => c.name === transaction.category);\r\n          \r\n          if (categoryIndex >= 0) {\r\n            newCategories[categoryIndex].amount += parseFloat(transaction.amount);\r\n          } else {\r\n            newCategories.push({\r\n              name: transaction.category,\r\n              amount: parseFloat(transaction.amount),\r\n              icon: getCategoryIcon(transaction.category)\r\n            });\r\n          }\r\n          \r\n          return newCategories;\r\n        });\r\n      }\r\n\r\n      setShowTransactionForm(false);\r\n    } catch (error) {\r\n      console.error('Transaction error:', error);\r\n      setFormError(error.response?.data?.detail || 'Failed to add transaction. Please try again.');\r\n    } finally {\r\n      setIsSubmitting(false);\r\n    }\r\n  };\r\n\r\n  const handleEditTransaction = async (transaction) => {\r\n    const token = localStorage.getItem('access_token');\r\n    try {\r\n      await axios.put(\r\n        `http://localhost:8000/api/transactions/${transaction.id}/`,\r\n        transaction,\r\n        { headers: { Authorization: `Bearer ${token}` } }\r\n      );\r\n      await refreshData();\r\n    } catch (error) {\r\n      console.error('Error updating transaction:', error);\r\n      alert('Failed to update transaction. Please try again.');\r\n    }\r\n  };\r\n\r\n  const handleDeleteTransaction = async (transactionId) => {\r\n    const token = localStorage.getItem('access_token');\r\n    try {\r\n      await axios.delete(\r\n        `http://localhost:8000/api/transactions/${transactionId}/`, \r\n        { headers: { Authorization: `Bearer ${token}` } }\r\n      );\r\n      await refreshData();\r\n    } catch (error) {\r\n      console.error('Error deleting transaction:', error);\r\n      alert(`Failed to delete transaction. ${error.response?.data?.detail || 'Please try again.'}`);\r\n    }\r\n  };\r\n\r\n  const refreshData = async () => {\r\n    const token = localStorage.getItem('access_token');\r\n    try {\r\n      const [dashboardRes, monthlyRes, budgetsRes] = await Promise.all([\r\n        axios.get('http://localhost:8000/api/dashboard/', {\r\n          headers: { Authorization: `Bearer ${token}` } }\r\n        ),\r\n        axios.get('http://localhost:8000/api/transactions/monthly/', {\r\n          headers: { Authorization: `Bearer ${token}` } }\r\n        ),\r\n        axios.get('http://localhost:8000/api/budgets/', {\r\n          headers: { Authorization: `Bearer ${token}` } }\r\n        )\r\n      ]);\r\n\r\n      setDashboardData(dashboardRes.data);\r\n      setMonthlyTrends(formatMonthlyData(monthlyRes.data));\r\n      setBudgets(budgetsRes.data);\r\n    } catch (error) {\r\n      console.error('Error refreshing data:', error);\r\n    }\r\n  };\r\n\r\n  if (!dashboardData || !user) {\r\n    return <div className=\"loading\">Loading...</div>;\r\n  }\r\n\r\n  const { income, expenses, savings_goal, recent_transactions } = dashboardData;\r\n  const savings = income - expenses;\r\n  const progressPercentage = savings_goal.target_amount > 0 \r\n    ? (savings_goal.current_amount / savings_goal.target_amount) * 100 \r\n    : 0;\r\n\r\n  return (\r\n    <div className=\"dashboard-container\">\r\n      <Sidebar \r\n        activeMenu={activeMenu} \r\n        setActiveMenu={setActiveMenu} \r\n        notifications={notifications}\r\n        handleLogout={handleLogout}\r\n      />\r\n\r\n      <div className=\"main-content\">\r\n        <div className=\"content-header\">\r\n          <h1>{activeMenu.charAt(0).toUpperCase() + activeMenu.slice(1)}</h1>\r\n          <div className=\"header-actions\">\r\n            {activeMenu === 'expenses' && (\r\n              <button \r\n                className=\"btn btn-primary\"\r\n                onClick={() => setShowTransactionForm(true)}\r\n                disabled={isSubmitting}\r\n              >\r\n                <FontAwesomeIcon icon={faPlus} /> \r\n                {isSubmitting ? 'Processing...' : 'Add Transaction'}\r\n              </button>\r\n            )}\r\n            {activeMenu === 'overview' && (\r\n              <button \r\n                className=\"btn btn-secondary\"\r\n                onClick={() => generateReport()}\r\n              >\r\n                <FontAwesomeIcon icon={faFilePdf} /> Generate Report\r\n              </button>\r\n            )}\r\n          </div>\r\n        </div>\r\n\r\n        {activeMenu === 'dashboard' && (\r\n          <>\r\n            <SummaryCards \r\n              income={income}\r\n              expenses={expenses}\r\n              savings={savings}\r\n              savings_goal={savings_goal}\r\n              progressPercentage={progressPercentage}\r\n            />\r\n            <ChartsSection \r\n              income={income}\r\n              expenses={expenses}\r\n              monthlyTrends={monthlyTrends}\r\n              expenseCategories={expenseCategories}\r\n              budgets={budgets}\r\n            />\r\n            <TransactionsTable \r\n              transactions={recent_transactions}\r\n              title=\"Recent Transactions\"\r\n              onDelete={handleDeleteTransaction}\r\n              onEdit={handleEditTransaction}\r\n            />\r\n          </>\r\n        )}\r\n\r\n        {activeMenu === 'expenses' && (\r\n          <TransactionsTable \r\n            transactions={expenseTransactions}\r\n            title=\"Expenses\"\r\n            showFilters={true}\r\n            searchTerm={searchTerm}\r\n            setSearchTerm={setSearchTerm}\r\n            selectedCategory={selectedCategory}\r\n            setSelectedCategory={setSelectedCategory}\r\n            expenseCategories={expenseCategories}\r\n            onDelete={handleDeleteTransaction}\r\n            onEdit={handleEditTransaction}\r\n          />\r\n        )}\r\n\r\n        {activeMenu === 'overview' && (\r\n          <>\r\n            <ChartsSection \r\n              income={income}\r\n              expenses={expenses}\r\n              monthlyTrends={monthlyTrends}\r\n              expenseCategories={expenseCategories}\r\n              budgets={budgets}\r\n              showBudgetChart={true}\r\n            />\r\n            <BudgetSummary \r\n              budgets={budgets}\r\n              expenseCategories={expenseCategories}\r\n            />\r\n          </>\r\n        )}\r\n\r\n        {activeMenu === 'profile' && (\r\n          <ProfileSection \r\n            user={user} \r\n            setUser={setUser}\r\n          />\r\n        )}\r\n\r\n        {activeMenu === 'notifications' && (\r\n          <NotificationsList \r\n            notifications={notifications}\r\n            markNotificationAsRead={markNotificationAsRead}\r\n          />\r\n        )}\r\n      </div>\r\n\r\n      <Chatbot />\r\n      \r\n      {showTransactionForm && (\r\n        <TransactionForm \r\n          onClose={() => !isSubmitting && setShowTransactionForm(false)}\r\n          onSubmit={handleAddTransaction}\r\n          isSubmitting={isSubmitting}\r\n          error={formError}\r\n          categories={[\r\n            'food', 'transportation', 'housing',\r\n            'entertainment', 'utilities', 'health',\r\n            'education', 'other'\r\n          ]}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Dashboard;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}